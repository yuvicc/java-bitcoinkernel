plugins {
    id 'java'
    id "io.github.krakowski.jextract" version "0.5.0"
    id 'application'
}

// Define paths for Bitcoin Core
def bitcoinCoreDir = file("${project.projectDir}/bitcoinkernel/bitcoin")
def bitcoinBuildDir = file("${bitcoinCoreDir}/build")
def bitcoinKernelHeader = file("${bitcoinCoreDir}/src/kernel/bitcoinkernel.h")

// Task to build Bitcoin Core with kernel library
task buildBitcoinCore(type: Exec) {
    workingDir bitcoinCoreDir

    // Configure Bitcoin Core build
    commandLine 'cmake', '-B', 'build',
            '-DBUILD_KERNEL_LIB=ON',
            '-DBUILD_UTIL_CHAINSTATE=ON'

    // Only run if build directory doesn't exist or header has changed
    inputs.file bitcoinKernelHeader
    inputs.dir "${bitcoinCoreDir}/src"
    outputs.dir bitcoinBuildDir

    doFirst {
        println "Building Bitcoin Core with kernel library..."
    }
}

// Task to compile the built Bitcoin Core
task compileBitcoinCore(type: Exec) {
    dependsOn buildBitcoinCore
    workingDir bitcoinCoreDir

    commandLine 'cmake', '--build', 'build', '-j4'

    inputs.dir bitcoinBuildDir
    outputs.files(
            "${bitcoinBuildDir}/src/kernel/libbitcoinkernel.so",
            "${bitcoinBuildDir}/src/kernel/libbitcoinkernel.dylib"  // For macOS
    )

    doFirst {
        println "Compiling Bitcoin Core kernel library..."
    }
}

// Configure jextract to generate Java bindings
jextract {
    header(bitcoinKernelHeader.absolutePath) {
        // Point to the compiled library - adjust extension based on your OS
        libraries = [
                ":${bitcoinBuildDir}/src/kernel/libbitcoinkernel.so",
                ":${bitcoinBuildDir}/src/kernel/libbitcoinkernel.dylib"
        ]
        targetPackage = 'org.bitcoinkernel'
        className = 'BitcoinKernel'

        // Include directories for dependencies
        includes = [
                "${bitcoinCoreDir}/src",
                "${bitcoinCoreDir}/src/kernel",
                "${bitcoinBuildDir}/src/kernel"  // For generated headers
        ]
    }
}

// Configure source sets
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
            // Add jextract generated sources
            srcDir "${buildDir}/generated/sources/jextract"
        }
    }
}

// Ensure proper build order
jextract.dependsOn compileBitcoinCore
compileJava.dependsOn jextract

// Java toolchain configuration
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

// Runtime configuration
application {
    mainClass = 'org.bitcoinkernel.Main'
    applicationDefaultJvmArgs = [
            "--enable-preview",
            "--enable-native-access=ALL-UNNAMED",
            // Add library path for runtime linking
            "-Djava.library.path=${bitcoinBuildDir}/src/kernel"
    ]
}

//// Task to check if Bitcoin Core submodule is initialized
//task checkBitcoinCore {
//    doLast {
//        if (!bitcoinCoreDir.exists() || !bitcoinKernelHeader.exists()) {
//            throw new GradleException(
//                    "Bitcoin Core repository not found. Please ensure you've added it as a subtree:\n" +
//                            "git subtree add --prefix=bitcoinkernel/bitcoin https://github.com/bitcoin/bitcoin.git kernel-c-api --squash"
//            )
//        }
//    }
//}
//
//// Make all tasks depend on Bitcoin Core check
//tasks.matching { it.name != 'checkBitcoinCore' }.all {
//    dependsOn checkBitcoinCore
//}

// Clean task to remove Bitcoin Core build artifacts
//clean {
//    delete bitcoinBuildDir
//}

// Helper task to show library information
//task showLibraryInfo {
//    dependsOn compileBitcoinCore
//    doLast {
//        println "Bitcoin Core build directory: ${bitcoinBuildDir}"
//        println "Library files:"
//        fileTree(bitcoinBuildDir).matching {
//            include "**/*bitcoinkernel*"
//        }.each { file ->
//            println "  ${file.absolutePath}"
//        }
//    }
//}